{"version":3,"sources":["images/cat.jpeg","data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","video","App","useState","active","setActive","className","width","height","src","frameborder","allow","allowfullscreen","title","data","map","item","key","ira","alt","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,iLCA5B,G,MAAA,CACX,CACIC,KAAM,MACNC,MAAO,6CAEX,CACID,KAAM,SACNC,MAAO,6CAEX,CACID,KAAM,SACNC,MAAO,6CAEX,CACID,KAAM,SACNC,MAAO,6CAEX,CACID,KAAM,OACNC,MAAO,6CAEX,CACID,KAAM,WACNC,MAAO,6CAEX,CACID,KAAM,OACNC,MAAO,+CC2BAC,MAjDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACJC,EADI,KACIC,EADJ,KAGX,OACI,6BACI,4NACA,yBAAKC,UAAU,cACX,4BACIC,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,0EACNC,iBAAe,EACfC,MAAM,gBAGd,wMACA,yBAAKP,UAAU,OACVQ,EAAKC,KAAI,SAAAC,GACN,OACI,yBAAKV,UAAU,QACVF,IAAWY,EAAKhB,KACb,4BACIO,MAAM,MACNC,OAAO,MACPC,IAAKO,EAAKf,MACVS,YAAY,IACZC,MAAM,0EACNC,iBAAe,EACfK,IAAKD,EAAKhB,KACVa,MAAOG,EAAKhB,OAGhB,yBACIS,IAAKS,IACLZ,UAAU,WACVa,IAAI,OACJC,QAAS,kBAAMf,EAAUW,EAAKhB,SAEnC,WCjCXqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98f264fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.0d81383a.jpeg\";","export default [\n    {\n        name: 'ira',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'nastya',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'olesya',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'juliya',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'rita',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'nastya30',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n    {\n        name: 'vika',\n        video: 'https://www.youtube.com/embed/hY7m5jjJ9mM',\n    },\n];\n","import React, { useState } from 'react';\nimport ira from './images/cat.jpeg';\nimport './App.css';\nimport data from './data';\n\nfunction App() {\n    const [active, setActive] = useState('');\n\n    return (\n        <div>\n            <h1>Новогоднее обращение предводителя</h1>\n            <div className=\"main-video\">\n                <iframe\n                    width=\"320\"\n                    height=\"320\"\n                    src=\"https://www.youtube.com/embed/hY7m5jjJ9mM\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                    title=\"main-video\"\n                ></iframe>\n            </div>\n            <h2>Ищи себя и получай стих в подарок</h2>\n            <div className=\"app\">\n                {data.map(item => {\n                    return (\n                        <div className=\"item\">\n                            {active === item.name ? (\n                                <iframe\n                                    width=\"320\"\n                                    height=\"320\"\n                                    src={item.video}\n                                    frameborder=\"0\"\n                                    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                                    allowfullscreen\n                                    key={item.name}\n                                    title={item.name}\n                                ></iframe>\n                            ) : (\n                                <img\n                                    src={ira}\n                                    className=\"App-logo\"\n                                    alt=\"logo\"\n                                    onClick={() => setActive(item.name)}\n                                />\n                            )}{' '}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}